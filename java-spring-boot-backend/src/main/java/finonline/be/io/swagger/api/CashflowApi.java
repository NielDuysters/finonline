/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.54).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package finonline.be.io.swagger.api;

import finonline.be.io.swagger.model.CashflowBody;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import jakarta.annotation.Generated;
import jakarta.servlet.http.HttpServletRequest;

import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import finonline.be.io.swagger.model.Cashflow;
import finonline.be.io.swagger.model.CashflowcategoriesBody;

import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2024-04-05T01:57:44.169955+02:00[Europe/Brussels]")
@Validated
public interface CashflowApi {

	 @Operation(summary = "Add a cashflow data-row.", description = "Add a cashflow to the user making the request.", security = {
		        @SecurityRequirement(name = "finonline_backend_auth")    }, tags={ "cashflow" })
		    @ApiResponses(value = { 
		        @ApiResponse(responseCode = "201", description = "Cashflow succesfully added.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Cashflow.class))),
		        
		        @ApiResponse(responseCode = "400", description = "Bad request."),
		        
		        @ApiResponse(responseCode = "401", description = "Unauthorized."),
		        
		        @ApiResponse(responseCode = "409", description = "Conflict adding cashflow.") })
		    @RequestMapping(value = "/cashflow",
		        produces = { "application/json" }, 
		        consumes = { "application/json" }, 
		        method = RequestMethod.POST)
		    ResponseEntity<Cashflow> addCashflow(Authentication authentication, HttpServletRequest request, @Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody Object body
		);


		    @Operation(summary = "Delete a cashflow.", description = "Delete cashflow data-row with id {id} if this object belongs to user making the request.", security = {
		        @SecurityRequirement(name = "finonline_backend_auth")    }, tags={ "cashflow" })
		    @ApiResponses(value = { 
		        @ApiResponse(responseCode = "200", description = "Cashflow deleted."),
		        
		        @ApiResponse(responseCode = "401", description = "Unauthorized."),
		        
		        @ApiResponse(responseCode = "500", description = "Error deleting cashflow.") })
		    @RequestMapping(value = "/cashflow/{id}",
		        method = RequestMethod.DELETE)
		    ResponseEntity<Void> deleteCashflow(Authentication authentication, HttpServletRequest request, @Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("id") Integer id
		);


		    @Operation(summary = "Get all cashflows of user.", description = "Get an array of all the cashflows of the user making the request.", security = {
		        @SecurityRequirement(name = "finonline_backend_auth")    }, tags={ "cashflow" })
		    @ApiResponses(value = { 
		        @ApiResponse(responseCode = "200", description = "Cashflows succesfully retrieved.", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Cashflow.class)))),
		        
		        @ApiResponse(responseCode = "400", description = "Bad request."),
		        
		        @ApiResponse(responseCode = "401", description = "Unauthorized.") })
		    @RequestMapping(value = "/cashflow",
		        produces = { "application/json" }, 
		        method = RequestMethod.GET)
		    ResponseEntity<List<Cashflow>> getCashflow(Authentication authentication, HttpServletRequest request);
}
