/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.54).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package finonline.be.io.swagger.api;

import java.util.Map;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import jakarta.annotation.Generated;
import jakarta.servlet.http.HttpServletRequest;

import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import finonline.be.io.swagger.model.ChartRevenueAndExpensesMonthly;
import finonline.be.io.swagger.model.ChartTransactionsPerCategory;

import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;

import java.math.BigDecimal;
import java.util.List;
import java.util.Map;

@Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2024-04-05T01:57:44.169955+02:00[Europe/Brussels]")
@Validated
public interface ChartsApi {

    @Operation(summary = "Get all the periods of the user containing data.", description = "Get all the periods of the user containing data.", security = {
        @SecurityRequirement(name = "finonline_backend_auth")    }, tags={ "chart" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Chart data successfully retrieved.", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = String.class)))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized."),
        
        @ApiResponse(responseCode = "500", description = "Internal server error.") })
    @RequestMapping(value = "/charts/periods",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<String>> getChartPeriods(Authentication authentication, HttpServletRequest request);


    @Operation(summary = "Get chartdata to generate revenue and expenses of a month.", description = "Get chartdata to generate revenue and expenses of a month.", security = {
        @SecurityRequirement(name = "finonline_backend_auth")    }, tags={ "chart" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Chart data successfully retrieved.", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ChartRevenueAndExpensesMonthly.class)))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized."),
        
        @ApiResponse(responseCode = "500", description = "Internal server error.") })
    @RequestMapping(value = "/charts/revenue-expenses-monthly",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<ChartRevenueAndExpensesMonthly>> getChartRevenueAndExpensesMonthly(Authentication authentication, HttpServletRequest request);


    @Operation(summary = "Get chartdata to generate transactions per category.", description = "Get chartdata to generate transactions per category.", security = {
        @SecurityRequirement(name = "finonline_backend_auth")    }, tags={ "chart" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Chart data successfully retrieved.", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ChartTransactionsPerCategory.class)))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized."),
        
        @ApiResponse(responseCode = "500", description = "Internal server error.") })
    @RequestMapping(value = "/charts/transactions-per-category/{type}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<ChartTransactionsPerCategory>> getChartTransactionsPerCategory(Authentication authentication, HttpServletRequest request, @Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema(allowableValues={ "REVENUE", "EXPENSE" }
)) @PathVariable("type") String type
);


    @Operation(summary = "Get chartdata to generate transactions per category for a specific period.", description = "Get chartdata to generate transactions per category for a specific period.", security = {
        @SecurityRequirement(name = "finonline_backend_auth")    }, tags={ "chart" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Chart data successfully retrieved.", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ChartTransactionsPerCategory.class)))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized."),
        
        @ApiResponse(responseCode = "500", description = "Internal server error.") })
    @RequestMapping(value = "/charts/transactions-per-category/{type}/{period}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<ChartTransactionsPerCategory>> getChartTransactionsPerCategoryPerPeriod(Authentication authentication, HttpServletRequest request, @Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema(allowableValues={ "REVENUE", "EXPENSE" }
)) @PathVariable("type") String type
, @Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("period") String period
);


    @Operation(summary = "Get data displaying the evolution of the capital of the user.", description = "Get data displaying the evolution of the capital of the user.", security = {
        @SecurityRequirement(name = "finonline_backend_auth")    }, tags={ "chart" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Chart data successfully retrieved.", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Map.class)))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized."),
        
        @ApiResponse(responseCode = "500", description = "Internal server error.") })
    @RequestMapping(value = "/charts/user-capital-evolution",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Map<String, BigDecimal>> getChartUserCapitalEvolution(Authentication authentication, HttpServletRequest request);

}

