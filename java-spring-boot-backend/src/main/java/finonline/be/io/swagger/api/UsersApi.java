/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.54).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package finonline.be.io.swagger.api;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import jakarta.annotation.Generated;
import jakarta.servlet.http.HttpServletRequest;

import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import finonline.be.io.swagger.model.User;
import finonline.be.io.swagger.model.UsersBody;

import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2024-04-05T01:57:44.169955+02:00[Europe/Brussels]")
@Validated
public interface UsersApi {

	 @Operation(summary = "Register a new user.", description = "Register a new user.", tags={ "user" })
	    @ApiResponses(value = { 
	        @ApiResponse(responseCode = "201", description = "User created.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = User.class))),
	        
	        @ApiResponse(responseCode = "409", description = "User already exists.") })
	    @RequestMapping(value = "/users",
	        produces = { "application/json" }, 
	        consumes = { "application/json" }, 
	        method = RequestMethod.POST)
	    ResponseEntity<User> createUser(@Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody Object body
	);


	    @Operation(summary = "Get info of authenticated user.", description = "Get info of authenticated user by checking JWT-token in request.", security = {
	        @SecurityRequirement(name = "finonline_backend_auth")    }, tags={ "user" })
	    @ApiResponses(value = { 
	        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = User.class))),
	        
	        @ApiResponse(responseCode = "401", description = "Unauthorized.") })
	    @RequestMapping(value = "/users",
	        produces = { "application/json" }, 
	        method = RequestMethod.GET)
	    ResponseEntity<User> getUser(Authentication authentication, HttpServletRequest request);


	    @Operation(summary = "Update startCapital of user.", description = "Update startCapital of user.", security = {
	        @SecurityRequirement(name = "finonline_backend_auth")    }, tags={ "user" })
	    @ApiResponses(value = { 
	        @ApiResponse(responseCode = "200", description = "User updated.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = User.class))),
	        
	        @ApiResponse(responseCode = "400", description = "Unknown error.") })
	    @RequestMapping(value = "/users",
	        produces = { "application/json" }, 
	        consumes = { "application/json" }, 
	        method = RequestMethod.PATCH)
	    ResponseEntity<User> patchUser(Authentication authentication, HttpServletRequest request, @Parameter(in = ParameterIn.DEFAULT, description = "The new startCapital of the user.", required=true, schema=@Schema()) @Valid @RequestBody UsersBody body
	);


}

